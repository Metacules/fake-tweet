{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","nickname","setNickname","name","setName","avatar","setAvatar","verified","setVerified","locked","setLocked","nightMode","setNightMode","text","setText","image","setImage","date","setDate","app","setApp","retweets","setRetweets","likes","setLikes","className","config","user","htmlFor","type","id","value","onChange","e","target","checked","val","maxLength","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ed32117e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Tweet from 'fake-tweet';\nimport 'fake-tweet/build/index.css';\n\nfunction App() {\n\n  const [nickname, setNickname] = useState(\"LFC\");\n  const [name, setName] = useState(\"Liverpool FC\");\n  const [avatar, setAvatar] = useState(\"https://pbs.twimg.com/profile_images/1202545168542511104/sEunL4Iq_400x400.jpg\");\n  const [verified, setVerified] = useState(true);\n  const [locked, setLocked] = useState(false);\n  const [nightMode, setNightMode] = useState(false);\n  const [text, setText] = useState(\"üèÜ WE‚ÄôRE CLUB WORLD CHAMPIONS!! üèÜ\");\n  const [image, setImage] = useState(\"https://pbs.twimg.com/media/EMVe-JgWwAEwrdw?format=jpg&name=small\");\n  const [date, setDate] = useState(\"9:06 PM ¬∑ Dec 21, 2019\");\n  const [app, setApp] = useState(\"Twitter Media Studio\");\n  const [retweets, setRetweets] = useState(48900);\n  const [likes, setLikes] = useState(180500);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Tweet config={\n          {\n            user: {\n              nickname: nickname,\n              name: name,\n              avatar: avatar,\n              verified: verified,\n              locked: locked\n            },\n            nightMode: nightMode,\n            text: text,\n            image: image,\n            date: date,\n            app: app,\n            retweets: retweets,\n            likes: likes\n          }\n        } />\n        <div>\n          <form className=\"config\">\n            <fieldset>\n              <legend>User</legend>\n              <div>\n                <label htmlFor=\"nickame\">Nickname</label>\n                <input type=\"text\" id=\"nickname\" value={nickname} onChange={e => setNickname(e.target.value)} />\n              </div>\n              <div>\n                <label htmlFor=\"nickame\">Name</label>\n                <input type=\"text\" id=\"name\" value={name} onChange={e => setName(e.target.value)} />\n              </div>\n              <div>\n                <label htmlFor=\"nickame\">Avatar</label>\n                <input type=\"text\" id=\"avatar\" value={avatar} onChange={e => setAvatar(e.target.value)} />\n              </div>\n              <div>\n                <label htmlFor=\"verified\">Verified</label>\n                <input type=\"checkbox\" id=\"verified\" checked={verified} onChange={e => {\n                  const val = e.target.checked;\n                  setVerified(val);\n                  if (val && locked) setLocked(false);\n                }} />\n              </div>\n              <div>\n                <label htmlFor=\"locked\">Locked</label>\n                <input type=\"checkbox\" id=\"locked\" checked={locked} onChange={e => {\n                  const val = e.target.checked;\n                  setLocked(val);\n                  if (val && verified) setVerified(false);\n                }} />\n              </div>\n            </fieldset>\n            <fieldset>\n              <legend>Tweet</legend>\n              <div>\n                <label htmlFor=\"night-mode\">Night Mode</label>\n                <input type=\"checkbox\" id=\"night-mode\" checked={nightMode}\n                  onChange={e => { setNightMode(e.target.checked) }} />\n              </div>\n              <div>\n                <label htmlFor=\"text\">Text</label>\n                <textarea id=\"text\" value={text} onChange={e => setText(e.target.value)}\n                  maxLength=\"280\"></textarea>\n              </div>\n              <div>\n                <label htmlFor=\"image\">Image</label>\n                <input type=\"text\" id=\"image\" value={image} onChange={e => setImage(e.target.value)} />\n              </div>\n              <div>\n                <label htmlFor=\"date\">Date</label>\n                <input type=\"text\" id=\"date\" value={date} onChange={e => setDate(e.target.value)} />\n              </div>\n              <div>\n                <label htmlFor=\"app\">App</label>\n                <input type=\"text\" id=\"app\" value={app} onChange={e => setApp(e.target.value)} />\n              </div>\n              <div>\n                <label htmlFor=\"retweets\">Retweets</label>\n                <input type=\"number\" id=\"retweets\" value={retweets} onChange={e => setRetweets(e.target.value)} />\n              </div>\n              <div>\n                <label htmlFor=\"likes\">Likes</label>\n                <input type=\"number\" id=\"likes\" value={likes} onChange={e => setLikes(e.target.value)} />\n              </div>\n            </fieldset>\n          </form>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}